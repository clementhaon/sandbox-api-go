#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Test de l'API REST Go avec Authentification${NC}"
echo "================================================="

# Test 1: Page d'accueil
echo -e "\n${YELLOW}1. Test GET / (page d'accueil)${NC}"
curl -s http://localhost:8080/ | jq '.'

# Test 2: Connexion avec utilisateur existant
echo -e "\n${YELLOW}2. Connexion avec utilisateur admin${NC}"
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"password123"}')

echo "$LOGIN_RESPONSE" | jq '.'

# Extraire le token pour les prochaines requ√™tes
TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token')

if [ "$TOKEN" != "null" ] && [ "$TOKEN" != "" ]; then
    echo -e "${GREEN}‚úÖ Token obtenu: ${TOKEN:0:20}...${NC}"
else
    echo -e "${RED}‚ùå Impossible d'obtenir le token${NC}"
    exit 1
fi

# Test 3: Essayer d'acc√©der aux t√¢ches sans token (doit √©chouer)
echo -e "\n${YELLOW}3. Test GET /api/tasks sans authentification (doit √©chouer)${NC}"
curl -s http://localhost:8080/api/tasks | jq '.'

# Test 4: Acc√©der aux t√¢ches avec token
echo -e "\n${YELLOW}4. Test GET /api/tasks avec authentification${NC}"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer $TOKEN" | jq '.'

# Test 5: Cr√©er une nouvelle t√¢che
echo -e "\n${YELLOW}5. Cr√©er une nouvelle t√¢che${NC}"
curl -s -X POST http://localhost:8080/api/tasks \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{"title":"Ma t√¢che s√©curis√©e","description":"Cr√©√©e avec authentification","completed":false}' | jq '.'

# Test 6: V√©rifier que la t√¢che a √©t√© ajout√©e
echo -e "\n${YELLOW}6. Lister les t√¢ches apr√®s cr√©ation${NC}"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer $TOKEN" | jq '.'

# Test 7: Inscription d'un nouvel utilisateur
echo -e "\n${YELLOW}7. Inscription d'un nouvel utilisateur${NC}"
NEW_USER_RESPONSE=$(curl -s -X POST http://localhost:8080/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"motdepasse123"}')

echo "$NEW_USER_RESPONSE" | jq '.'

# Extraire le token du nouvel utilisateur
NEW_TOKEN=$(echo "$NEW_USER_RESPONSE" | jq -r '.token')

# Test 8: V√©rifier que le nouvel utilisateur n'a pas acc√®s aux t√¢ches de l'admin
echo -e "\n${YELLOW}8. V√©rifier l'isolation des donn√©es utilisateur${NC}"
echo "T√¢ches du nouvel utilisateur (devrait √™tre vide):"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer $NEW_TOKEN" | jq '.'

# Test 9: Le nouvel utilisateur cr√©e une t√¢che
echo -e "\n${YELLOW}9. Le nouvel utilisateur cr√©e sa propre t√¢che${NC}"
curl -s -X POST http://localhost:8080/api/tasks \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $NEW_TOKEN" \
  -d '{"title":"T√¢che du nouvel utilisateur","description":"Visible seulement par moi","completed":false}' | jq '.'

# Test 10: V√©rifier que chaque utilisateur ne voit que ses t√¢ches
echo -e "\n${YELLOW}10. V√©rification finale de l'isolation des donn√©es${NC}"
echo "T√¢ches de l'admin:"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer $TOKEN" | jq '.tasks | length as $count | "Nombre de t√¢ches: \($count)"'

echo "T√¢ches du nouvel utilisateur:"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer $NEW_TOKEN" | jq '.tasks | length as $count | "Nombre de t√¢ches: \($count)"'

# Test 11: Essayer d'acc√©der √† une t√¢che d'un autre utilisateur
echo -e "\n${YELLOW}11. Test de s√©curit√©: acc√©der √† la t√¢che d'un autre utilisateur (doit √©chouer)${NC}"
curl -s http://localhost:8080/api/tasks/1 \
  -H "Authorization: Bearer $NEW_TOKEN" | jq '.'

# Test 12: Token invalide
echo -e "\n${YELLOW}12. Test avec token invalide${NC}"
curl -s http://localhost:8080/api/tasks \
  -H "Authorization: Bearer token-invalide" | jq '.'

echo -e "\n${GREEN}‚úÖ Tests d'authentification termin√©s !${NC}"
echo -e "${BLUE}üìù R√©sum√©:${NC}"
echo -e "  - ‚úÖ Authentification par JWT"
echo -e "  - ‚úÖ Isolation des donn√©es par utilisateur"
echo -e "  - ‚úÖ Protection des endpoints"
echo -e "  - ‚úÖ Validation des tokens" 